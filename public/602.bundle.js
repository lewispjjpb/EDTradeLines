"use strict";(self.webpackChunkedtradelines=self.webpackChunkedtradelines||[]).push([[602],{602:(t,e,o)=>{o.r(e),o.d(e,{default:()=>z});var n=o(294),r=o(669),a=o.n(r),i=o(970),c=(o(935),o(660));function l(t){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},l(t)}function u(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function s(t,e){return s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},s(t,e)}function f(t,e){if(e&&("object"===l(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return m(t)}function m(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function p(t){return p=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},p(t)}const y=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(l,t);var e,o,r,a,i=(r=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=p(r);if(a){var o=p(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return f(this,t)});function l(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,l),(e=i.call(this,t)).state={graphData:{}},e.valueClick=e.valueClick.bind(m(e)),e}return e=l,(o=[{key:"valueClick",value:function(t){for(var e="",o=0;o<t.points.length;o++)e=t.points[o].text;this.props.getCommodityDetails(e[0])}},{key:"componentDidUpdate",value:function(t){if(t.data.commodities!==this.props.data.commodities){for(var e=this.props.data.commodities,o=[],n=[],r=[],a=0;a<e.length;a++)o.push(e[a].stock),n.push(e[a].stock*e[a].buyPrice),r.push([e[a].name,e[a].buyPrice]);var i=[{x:o,y:n,type:"scatter",mode:"markers",marker:{color:"#ff9030"},text:r,hovertemplate:"<i>Commodity:</i> %{text[0]} <br>Total supply: %{x} <br>Unit price: %{text[1]} <br>Cost to purchase stock: %{y}"}],c=this.valueClick;this.setState({graphData:{trace:i,layout:{margin:{t:40,b:50},plot_bgcolor:"#2b2a29",paper_bgcolor:"#2b2a29",font:{color:"#ff9030"},height:510,width:600,responsive:!0,autosize:!0,useResizeHandler:!0,log_x:!0,log_y:!0,xaxis:{title:"total supply",color:"#66adee"},yaxis:{title:"total cost to buy",color:"#66adee"},title:"Buy from station"},onClick:c}})}}},{key:"render",value:function(){return n.createElement("div",null,n.createElement(c.default,{data:this.state.graphData.trace,layout:this.state.graphData.layout,onClick:this.state.graphData.onClick,getCommodityDetails:this.props.getCommodityDetails}))}}])&&u(e.prototype,o),l}(n.Component);function d(t){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},d(t)}function h(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function b(t,e){return b=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},b(t,e)}function g(t,e){if(e&&("object"===d(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return v(t)}function v(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function S(t){return S=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},S(t)}o(222);const k=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&b(t,e)}(l,t);var e,o,r,a,i=(r=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=S(r);if(a){var o=S(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return g(this,t)});function l(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,l),(e=i.call(this,t)).state={graphData:{}},e.valueClick=e.valueClick.bind(v(e)),e}return e=l,(o=[{key:"valueClick",value:function(t){for(var e="",o=0;o<t.points.length;o++)e=t.points[o].text;this.props.getCommodityDetails(e[0])}},{key:"componentDidUpdate",value:function(t){if(t.data.commodities!==this.props.data.commodities){for(var e=this.props.data.commodities,o=[],n=[],r=[],a=0;a<e.length;a++)o.push(e[a].demand),n.push(e[a].demand*e[a].sellPrice),r.push([e[a].name,e[a].sellPrice]);var i=[{x:o,y:n,type:"scatter",mode:"markers",marker:{color:"#ff9030"},text:r,hoverformat:"~s",hovertemplate:"<i>Commodity:</i> %{text[0]} <br>Total demand: %{x} <br>Unit price: %{text[1]} <br>Total profit potential: %{y}"}],c=this.valueClick;this.setState({graphData:{trace:i,layout:{margin:{t:40,b:50},plot_bgcolor:"#2b2a29",paper_bgcolor:"#2b2a29",font:{color:"#ff9030"},height:510,width:600,responsive:!0,autosize:!0,useResizeHandler:!0,log_x:!0,log_y:!0,xaxis:{title:"total demand",color:"#66adee"},yaxis:{title:"total potential profit",color:"#66adee"},title:"Sell to station"},onClick:c}})}}},{key:"render",value:function(){return n.createElement("div",{id:"selltostation"},n.createElement(c.default,{data:this.state.graphData.trace,layout:this.state.graphData.layout,onClick:this.state.graphData.onClick,getCommodityDetails:this.props.getCommodityDetails}))}}])&&h(e.prototype,o),l}(n.Component);var w=o(484);function x(){return x=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(t[n]=o[n])}return t},x.apply(this,arguments)}const C=function(t){var e,o=t.statList;return e=t.statList.length>0?"Type station name...":"Station list still loading...",n.createElement(w.ZP,{onChange:function(e){return e?t.getStation(e):""}},(function(t){var r=t.getInputProps,a=t.getItemProps,i=t.getLabelProps,c=t.getMenuProps,l=t.isOpen,u=t.inputValue,s=t.highlightedIndex,f=t.selectedItem,m=t.getRootProps;return n.createElement("div",{id:"searchbox"},n.createElement("label",i(),"Select a station:  "),n.createElement("div",m({},{suppressRefError:!0}),n.createElement("input",x({},r(),{placeholder:e}))),n.createElement("ul",c(),l?o.filter((function(t){return!u||t.toUpperCase().includes(u.toUpperCase())})).map((function(t,e){return n.createElement("div",a({key:t,index:e,item:t,style:{backgroundColor:s===e?"lightgray":"white",fontWeight:f===t?"bold":"normal"}}),t)})):null))}))};function E(t){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},E(t)}function O(t,e){(null==e||e>t.length)&&(e=t.length);for(var o=0,n=new Array(e);o<e;o++)n[o]=t[o];return n}var j=n.lazy((function(){return Promise.resolve().then(o.bind(o,660))}));const P=function(t){var e=function(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var o=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=o){var n,r,a=[],i=!0,c=!1;try{for(o=o.call(t);!(i=(n=o.next()).done)&&(a.push(n.value),!e||a.length!==e);i=!0);}catch(t){c=!0,r=t}finally{try{i||null==o.return||o.return()}finally{if(c)throw r}}return a}}(t,e)||function(t,e){if(t){if("string"==typeof t)return O(t,e);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?O(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,n.useState)({}),2),o=e[0];if(e[1],t.data&&"object"===E(t.data)){for(var r=t.data.markets,a=t.data.commodity,i=0,c=0;c<t.currentStation.commodities.length;c++)t.currentStation.commodities[c].name===a&&(i=c);var l=[],u=[],s=[];for(c=0;c<r.length;c++)l.push(r[c].sellPrice),u.push(r[c].demand),s.push([r[c].station,r[c].system]);o.trace=[{x:l,y:u,type:"scatter",mode:"markers",marker:{color:"#ff9030"},text:s,hoverformat:"~s",hovertemplate:"Station name: %{text[0]} <br>System name: %{text[1]} <br>"},{x:[t.currentStation.commodities[i].sellPrice],y:[t.currentStation.commodities[i].demand],type:"scatter",mode:"markers+text",marker:{color:"#66adee",symbol:"x",size:10},text:[t.currentStation.stationName],textposition:"bottom center",textfont:{color:"#66adee"}}],o.layout={title:"Stations buying ".concat(a," around the galaxy:"),margin:{t:40,b:50},plot_bgcolor:"#2b2a29",paper_bgcolor:"#2b2a29",font:{color:"#ff9030"},height:510,width:600,showlegend:!1,xaxis:{type:"log",title:"price per unit",color:"#66adee"},yaxis:{type:"log",title:"total demand",color:"#66adee"}}}return"object"===E(t.data)?n.createElement(n.Suspense,{fallback:n.createElement("div",null,"Loading graph...")},n.createElement(j,{data:o.trace,layout:o.layout})):n.createElement("div",null,t.data)};function _(t){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_(t)}function D(t,e){(null==e||e>t.length)&&(e=t.length);for(var o=0,n=new Array(e);o<e;o++)n[o]=t[o];return n}var L=n.lazy((function(){return Promise.resolve().then(o.bind(o,660))}));const R=function(t){var e=function(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var o=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=o){var n,r,a=[],i=!0,c=!1;try{for(o=o.call(t);!(i=(n=o.next()).done)&&(a.push(n.value),!e||a.length!==e);i=!0);}catch(t){c=!0,r=t}finally{try{i||null==o.return||o.return()}finally{if(c)throw r}}return a}}(t,e)||function(t,e){if(t){if("string"==typeof t)return D(t,e);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?D(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,n.useState)({}),2),o=e[0];if(e[1],t.data&&"object"===_(t.data)){for(var r=t.data.markets,a=t.data.commodity,i=0,c=0;c<t.currentStation.commodities.length;c++)t.currentStation.commodities[c].name===a&&(i=c);var l=[],u=[],s=[];for(c=0;c<r.length;c++)l.push(r[c].buyPrice),u.push(r[c].stock),s.push([r[c].station,r[c].system]);o.trace=[{x:l,y:u,type:"scatter",mode:"markers",marker:{color:"#ff9030"},text:s,hoverformat:"~s",hovertemplate:"Station name: %{text[0]} <br>System name: %{text[1]} <br>"},{x:[t.currentStation.commodities[i].buyPrice],y:[t.currentStation.commodities[i].stock],type:"scatter",mode:"markers",marker:{color:"#66adee",symbol:"x",size:10},text:[t.currentStation.stationName],textposition:"bottom center",textfont:{color:"#66adee"}}],o.layout={title:"".concat(a," for purchase around the galaxy:"),margin:{t:40,b:50},plot_bgcolor:"#2b2a29",paper_bgcolor:"#2b2a29",font:{color:"#ff9030"},height:510,width:600,showlegend:!1,xaxis:{type:"log",title:"price per unit",color:"#66adee"},yaxis:{type:"log",title:"total supply",color:"#66adee"}}}return"object"===_(t.data)?n.createElement(n.Suspense,{fallback:n.createElement("div",null,"Loading graph...")},n.createElement(L,{data:o.trace,layout:o.layout})):n.createElement("div",null,t.data)};function T(t){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},T(t)}function A(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function B(t,e){return B=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},B(t,e)}function I(t,e){if(e&&("object"===T(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return N(t)}function N(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function U(t){return U=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},U(t)}const z=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&B(t,e)}(u,t);var e,o,r,c,l=(r=u,c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=U(r);if(c){var o=U(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return I(this,t)});function u(t){var e,o,n,r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),r=[],(n="statList")in(o=N(e=l.call(this,t)))?Object.defineProperty(o,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):o[n]=r,e.state={currentStation:{},stationList:[],activeSuggestion:0,filtered:[],showSuggestions:!1,queueStation:"",commodS:"Click on a commodity above for more information (please be patient)",commodB:""},e.getStation=e.getStation.bind(N(e)),e.populateStationList=e.populateStationList.bind(N(e)),e.setStation=e.setStation.bind(N(e)),e.getNewStation=e.getNewStation.bind(N(e)),e.getCommodityDetails=e.getCommodityDetails.bind(N(e)),e}return e=u,(o=[{key:"componentDidMount",value:function(){this.getStation("Jameson Memorial"),this.populateStationList()}},{key:"getStation",value:function(t){var e=this;a().get("/market/".concat(t)).then((function(t){return e.setState({currentStation:t.data[0]})})).catch((function(t){return console.log(t)}))}},{key:"populateStationList",value:function(){var t=this;a().get("/stations").then((function(e){t.setState({stationList:e.data}),t.statList=e.data})).catch((function(t){return console.log(t)}))}},{key:"setStation",value:function(t){t.preventDefault();var e=t.target.value,o=this.statList.filter((function(t){return t.toLowerCase().indexOf(e.toLowerCase())>-1}));this.setState({activeSuggestion:0,filtered:o,showSuggestions:!0,queueStation:t.target.value})}},{key:"selectStationFromList",value:function(t){this.setState({activeSuggestion:0,filtered:[],showSuggestions:!1,queueStation:t.currentTarget.innerText})}},{key:"getNewStation",value:function(t){t.preventDefault();var e=this.state.queueStation;this.getStation(e)}},{key:"getCommodityDetails",value:function(t){var e=this,o=this.state.stationList.length;this.setState({commodS:"Crawling ".concat(o," markets with a very tiny hamster...")}),this.setState({commodB:"Crawling ".concat(o," markets with a very tiny hamster...")}),a().get("/commoditiesS/".concat(t)).then((function(t){e.setState({commodS:t.data})})).catch((function(t){return console.log(t)})),a().get("/commoditiesB/".concat(t)).then((function(t){e.setState({commodB:t.data})})).catch((function(t){return console.log(t)}))}},{key:"render",value:function(){return n.createElement("div",{className:"container"},n.createElement("div",{className:"header"},n.createElement("div",null,"Current station: ",n.createElement("b",null,this.state.currentStation.stationName,"   "),"--- Market data age: ",(0,i.WU)(this.state.currentStation.date)," "),n.createElement(C,{statList:this.state.stationList,getStation:this.getStation})),n.createElement("div",{className:"main"},n.createElement(k,{data:this.state.currentStation,getCommodityDetails:this.getCommodityDetails}),n.createElement(y,{data:this.state.currentStation,getCommodityDetails:this.getCommodityDetails})),n.createElement("div",{className:"main2"},n.createElement(P,{data:this.state.commodS,currentStation:this.state.currentStation}),n.createElement(R,{data:this.state.commodB,currentStation:this.state.currentStation})),n.createElement("div",{className:"footer"},"Hey!  I'm looking for work as a developer!  Check out my ",n.createElement("a",{href:"https://www.linkedin.com/in/patrick-lewis-ms-pmp-34aaa254/",color:"white"},"LinkedIn")," and ",n.createElement("a",{href:"https://github.com/lewispjjpb"}," GitHub")," profiles!"),n.createElement("div",{className:"footer2"},"ED TradeLines is not endorsed by or affiliated with Frontier Developments. | Charts by Plotly"))}}])&&A(e.prototype,o),u}(n.Component)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,